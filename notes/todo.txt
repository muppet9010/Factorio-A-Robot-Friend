Make simple build blueprint job with dummy tasks for getting items. To test framework as much as anything. Just give the robots the needed items as part of the job.
I think any adhoc tasks can be recorded under the Robot Task Data for the task and be done just in that Task's Progress function(). They won't appear to outside views and the Progress() can pass the final state back up the chain, i.e. pre-fix it.



Core things to include:
    - Forces being deleted and merged. We cache them in Robot.
    - Robot entities dying, we need to update our cache of them and track their corpses. Also want to handle a robot entity becoming invalid at a high level of Progress() to avoid every task having to use UPS checking .valid every tick.
    - Robot standby and job paused:
        - This has been partially started to handle no-path errors. But at present we just pause the robot and its tasks and leave it in this state.
        - Robots need to support having their task in a job paused and the robot told to do something else, i.e. robot gets attacked so needs to defend itself. I want to get the framework in for this in a simple format early.
        - Being able to pause and resume jobs. Will need to propagate to the robots and tasks ?
        - Add a way for players to set their own and other player's robots in to a "standby" mode. In standby the robot doesn't perform any jobs and will stand idle. As players can't change other player's robots or jobs, but they can use standby to stop anything they deem as damaging/bad. Any player can return the robot to active state.
    - Automated testing including lots of removing and breaking things mid and post tests. As I added very few nil checks during initial coding.


Feature Enhancements:
    - Walking to location:
        - Detect railway and either try to path around or stop just before it, look both ways and then cross when safe. If not safe for X time place a signal and wire it up to be red, then cross safely.
        - Look at FUTURE note in path request. Need to try and use light touch paths for long distance and detailed paths for short difficult bits. Likely have to smooth things somewhere to stop the robot jerking around too much. Running in to things and glancing off is fine as long as it doesn't get stuck.
        - The current path_resolution_modifier of 3 can have issues with rocks and off grid items close together sometimes. In one test case they could path in 1 direction, but not the other.
    - Robot personalisation:
        - Robot name: Allow for a generic server name list (mod setting) and also each player to be able to rename their robots individually.
        - Robot color: Allow players to set a color per robot.
        - Show the robots as colored dots on the map. I don't think I can make the names appear on the map and thus can't honour the Show Players option on the map (and minimap) view.
    - Complete area:
        - Handle tiles. Consider landfill and similar tiles before other tiles (i.e. concrete).
        - Add options to job to allow filtering by selected types, i.e. power poles, roboports, landfill type tiles. Basically so you can do a priority build.
        - Support cliffs and knowing that cliffs require cliff explosives. At present they are unhandled entirely and thus ignored. They should be prioritised and if the entity can't be built due to them the item dropped from that robots actions list. So that once the cliffs are blown up and the next cycle of checking is done they are picked up. ???