A job is what a player asks the robot to do. This will be top level wrapper around a given task and may give the player behaviour choices on how it is completed.

When a robot is undertaking a task it will use multiple actions and sub tasks autonomously to complete the task. Tasks can take time and may include searches of the map in a time distributed fashion.

Actions are things where the robot interacts directly with the world. They are done instantly and thus managed by a task as everything needs to have a duration to complete. The master's name will be used as the player for all actions (ensures events are raised and so the correct player can be blamed).

Actions are:
    - Walking - LuaControl.walking_state
    - Driving - LuaControl.riding_state
    - Riding a train - give train a path and set off
    - Crafting - LuaControl.begin_crafting
    - Building - LuaSurface.create_entity (building from cursor is a LuaPlayer function)
    - Mining - LuaControl.mine_entity (have to wait the mining time as this will appear instant)
    - Upgrading - LuaSurface.create_entity (with fast_replace true)
    - Move items between chest and robot - LuaInventory.insert and LuaInventory.remove
    - Shooting - LuaControl.shooting_state (can target a position and then shoot nearest enemies or shoot at the ground)
    - Repairing - LuaControl.repair_state
    - Rotate entity - LuaEntity.rotate

Behaviours are related to the job and may dictate the action chosen or the choices made during the tasks decision process.

Tasks can contain other tasks. I.e. "build this blueprint" includes the tasks of obtaining a list of required materials, collecting or crafting them, moving there and placing the entities.

Tasks can be interrupted and will need to have a persisted state. When resumed the task will need to re-validate itself and confirm its current progress in the task is still accurate. Possibly returning to previously completed sub tasks and repeating their investigations and checking steps.

Tasks should register their calling function by name in to MOD.Interfaces.Tasks and MOD.Interfaces.Jobs. Then the Jobs/Tasks can store the name in their global data to be save/load safe. The interfaces can be used to call from one task to another up/down the chain in a save/load safe manner.

Planned Lower Tasks list (never directly called, but used by many other tasks in combinations):
    - Walk a path
    - Find walking path
    - Search chests for items
    - Scan area for ghosted items
    - Craft required items (manage the actions)

Planned Medium Tasks list (actually callable on their own in simple situations):
    - Walk to location:
        - Find walking path
        - Walk a path
    - Collect items:
        - Search chests for items
        - Move to location
        - Move items between chest and robot
        - Craft required items
    - Complete ghosts (includes build, mining, upgrading, rotating, etc):
        - Scan area for ghosted items (if not passed in)
        - Move to location
        - Do action (build, mining, upgrading, rotating, etc)


Planned Jobs Tasks list (main tasks that masters will generally get their robots to do):
    - Complete Blueprint:
        - Scan area for ghosted items
        - Collect items
        - Move to location
        - Complete ghosts
    - Move to location:
        - After finding distance:
            - Walk to location
            - Drive to location
            - Ride train to location


Jobs are owned and managed by a single player. A robot is owned by a single player. Players can assign their robots to their own jobs or to other players jobs.

All jobs will have some standard options like travel type restrictions (i.e. block car usage), combat mode, etc. There should be per player settings/GUI to control defaults for these as well.

We won't support updating jobs, but will allow via the GUI some sort of clone (with/out robots) to allow quick copying/replacing of them.