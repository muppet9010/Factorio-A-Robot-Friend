--[[
    TEMPLATE NOTES

    Do a find and replace on XXXXX with the name of the Job, i.e. MoveToLocation.
    The few YYYYY references in ActivateJob() should be replaced with the name of the primary task of this job, generally the same as the job.

    Some of these functions can have Job and Task specific arguments and parameters specified as well. See the JobManager and TaskManager for interface requirements.
]]


---@class Job_XXXXX_Data : Job_Data
---@field jobData Job_XXXXX_BespokeData

---@class Job_XXXXX_BespokeData

local XXXXX = {} ---@class Job_XXXXX_Interface : Job_Interface
XXXXX.jobName = "XXXXX"

XXXXX._OnLoad = function()
    MOD.Interfaces.Jobs.XXXXX = XXXXX
end

--- Called to create the job when it's initially added.
---@param playerIndex uint
---@return Job_XXXXX_Data
XXXXX.Create = function(playerIndex)
    local job = MOD.Interfaces.JobManager.CreateGenericJob(XXXXX.jobName, playerIndex, "XXXXX") ---@cast job Job_XXXXX_Data

    -- Store the target data.
    job.jobData = {
    }

    return job
end

--- Called when the job is actively started by a robot.
---@param job Job_XXXXX_Data
---@return Task_YYYYY_Data
XXXXX.ActivateJob = function(job)
    local primaryTask = MOD.Interfaces.Tasks.YYYYY.ActivateTask(job, nil)

    MOD.Interfaces.JobManager.ActivateGenericJob(job, primaryTask)

    return primaryTask
end

--- Called to remove the job when it's no longer wanted.
---@param job Job_XXXXX_Data
XXXXX.Remove = function(job)
    error("Not implemented")

    -- Clean out the primary task from the job and cleans any persistent or global data in the Task hierarchy.
    MOD.Interfaces.TaskManager.RemovingPrimaryTaskFromJob(job.primaryTask)
end

--- Called to pause the job and all of its activity.
---@param job Job_XXXXX_Data
XXXXX.Pause = function(job)
    error("Not implemented")
end

--- Called to resume a previously paused job.
---@param job Job_XXXXX_Data
XXXXX.Resume = function(job)
    error("Not implemented")
end

return XXXXX
